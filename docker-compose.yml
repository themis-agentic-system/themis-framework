version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: themis-postgres
    environment:
      POSTGRES_DB: themis
      POSTGRES_USER: themis
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-themis_dev_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U themis"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - themis-network

  # Themis API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: themis-api
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # API Configuration
      # For local dev: Leave THEMIS_API_KEY unset in .env for development mode (no auth)
      # For production: Set a secure API key in .env
      THEMIS_API_KEY: ${THEMIS_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}

      # Database Configuration
      DATABASE_URL: postgresql://themis:${POSTGRES_PASSWORD:-themis_dev_password}@postgres:5432/themis

      # Application Settings
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      CACHE_TTL_SECONDS: ${CACHE_TTL_SECONDS:-60}
    ports:
      - "8000:8000"
    volumes:
      # Mount outputs directory for generated artifacts
      - ./outputs:/app/outputs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - themis-network
    restart: unless-stopped

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: themis-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - themis-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: themis-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana-dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - themis-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

networks:
  themis-network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
